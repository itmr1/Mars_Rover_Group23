#include <Arduino.h> 
#include "command.h"
#include "controller.h"
#include "sensor.h"
#include <vector>

int x_object;
int y_object;
int size_collide;
int iteration_counter;
int current_angle;
command Mycommand;
controller Mycontroller;
sensor Mysensor;
bool close_to_edge=0;
bool obstacle=0;
int size_of_object;

std::vector<int> size_of_edges;

void setup(){
   Serial.begin(115200);
   size_of_edges.push_back(300);
   size_of_edges.push_back(250);
   size_of_edges.push_back(300);
   size_of_edges.push_back(230);
}

void loop(){

    if (Mycommand.automate == 1){
        if (Mycommand.Pathfinding==0){
            //if we are at the edge
            if (close_to_edge==1 && Mycontroller.task_finished==1){
                Mycommand.Direction="turn";
                Mycommand.angle_from_user=90;
                iteration_counter+=1;
                close_to_edge=0;
                //if we are at 4th edge so 1st iteration of the rectangle (edge case)
                if(iteration_counter==4){
                    size_of_edges[0] -= 30;
                    size_of_edges[1] -= 60;
                    size_of_edges[2] -= 60;
                    size_of_edges[3] -= 60;
                } 
                //if we are at 8th, 12th ... edge meaning iteration>1 
                else if (iteration_counter%4==0){
                    size_of_edges[0] -= 60;
                    size_of_edges[1] -= 60;
                    size_of_edges[2] -= 60;
                    size_of_edges[3] -= 60;
                }
            }

            //if no object in front and i can't see an object or the rover will not collide with it go forward but check if we are close to the edge
            if (Mycontroller.task_finished==1 && ((x_object==0 && y_object==0) || (x_object>-12 || x_object<12))){
                //We have to check for buildings cz coordinates is the middle (i think IK what to do)
                if (Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=60 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=120){
                    if (size_of_edges[0]-Mysensor.y<=50){
                        close_to_edge=1;
                        Mycommand.distance_from_user=size_of_edges[0]-Mysensor.y;
                        Mycommand.Direction="drive";
                    }
                    else {
                        Mycommand.Direction="drive";
                        Mycommand.distance_from_user=50;
                    }
                }
                else if (Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=150 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=210){
                    if (Mysensor.x-size_of_edges[3]-Mysensor.y<=50){
                        close_to_edge=1;
                        Mycommand.distance_from_user=Mysensor.x-size_of_edges[3]-Mysensor.y;
                        Mycommand.Direction="drive";
                    }
                    else {
                        Mycommand.Direction="drive";
                        Mycommand.distance_from_user=50;
                    }
                }
                else if (Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=-30 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=30){
                    if(size_of_edges[1]-Mysensor.x<=50){
                        close_to_edge=1;
                        Mycommand.distance_from_user=size_of_edges[1]-Mysensor.x;
                        Mycommand.Direction="drive";
                    }
                    else{
                    Mycommand.Direction="drive";
                    Mycommand.distance_from_user=50;
                    }
                }
                else if (Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=240 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=300){
                    if (Mysensor.y-size_of_edges[2]<=50){
                        close_to_edge=1;
                        Mycommand.distance_from_user=Mysensor.y-size_of_edges[2];
                        Mycommand.Direction="drive";
                    }
                    else{
                        Mycommand.Direction="drive";
                        Mycommand.distance_from_user=50;
                    }
                }
            }
            //if we detected the obstacle and stopped we have to calculate the distance to go more
            if ((y_object != 0) && obstacle==1){
                    Mycommand.distance_from_user=x_object-20;
                    Mycommand.Direction="drive";
            }
            //we are waiting in front of the obstacle to send to Command
            else if ((y_object<=22 && y_object>=18) && Mycontroller.task_finished==1){
                if ((Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=150 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=210)){
                    Mycommand.autonomous(Mysensor.x,Mysensor.y,Mysensor.x-30-size_collide ,Mysensor.y );
                }
                else if (Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=240 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=300){
                    Mycommand.autonomous(Mysensor.x,Mysensor.y,Mysensor.x ,Mysensor.y-30-size_collide  );
                }
                else if(Mycontroller.angle_PID_to_user(Mycontroller.current_angle)>=-30 && Mycontroller.angle_PID_to_user(Mycontroller.current_angle)<=30){
                    Mycommand.autonomous(Mysensor.x,Mysensor.y,Mysensor.x+30+size_collide ,Mysensor.y );
                }
                else{
                    Mycommand.autonomous(Mysensor.x,Mysensor.y,Mysensor.x ,Mysensor.y+30+size_collide  );
                }
                Mycommand.Pathfinding=1;
                obstacle=0;
            }
            //Add the code to receive from Timur and make Command execute (not sure it needs code)
            //Timur has to let me know when hes done to continue to reset obstacle as well

            //Here add the part about the the radius to see if we are going to hit it
            else if ((x_object-(size_of_object/2) <=12 || x_object+(size_of_object/2)>=-12)){
                Mycommand.Direction="off";
                Mycontroller.task_finished=1;
                obstacle=1;
                size_collide=size_of_object;
            }
            //We need to stop
        }

        







}



//Size of arena 233.7 x 355.5cm