#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <PID_v1.h>
#include <RunningMedian.h>
#include "controller.h"
#include "sensor.h"

#define MOTOR_A_IN1 15
#define MOTOR_A_IN2 13
#define MOTOR_A_ENA 2

#define MOTOR_B_IN1 14
#define MOTOR_B_IN2 12
#define MOTOR_B_ENA 4

    int MOTOR_DELTAMAX = 0;
    int MOTOR_NOMINAL = 0;
    int MOTOR_NOMINAL_TURN = 0;
    int MOTOR_NOMINAL_DRIVE = 80;
    int MOTOR_DELTAMAX_TURN = 60;
    int MOTOR_DELTAMAX_DRIVE = 40;

// PID ===================================================


Adafruit_MPU6050 mpu;
double gyro_offset;
double pi = 3.14159;
sensor Mysensor;
controller Mycontroller;
double Kp_turn=7, Ki_turn=0.005, Kd_turn=0.01;
double Kp_drive=3.4, Ki_drive=0, Kd_drive=0.02;
double target_angle = 90, user_angle = 90, current_angle = 90, angleCorrection = 0, current_angular_velocity = 0, median_angular_velocity = 0;
double limit = 0;
double error, medianError;
int countLoops = 0;

int desired_distance=30;
int old_distance_y;
int distance_y_covered;

PID turnPID(&current_angle, &angleCorrection, &target_angle, Kp_turn, Ki_turn, Kd_turn, DIRECT);
PID drivePID(&current_angle, &angleCorrection, &target_angle, Kp_drive, Ki_drive, Kd_drive, DIRECT);

// Interrupts ===================================================
    volatile int interruptCounter;
 
    hw_timer_t * timer = NULL;
    portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
 
    void IRAM_ATTR onTimer() {
        portENTER_CRITICAL_ISR(&timerMux);
        interruptCounter++;
        portEXIT_CRITICAL_ISR(&timerMux);
    }


// Command ===================================================
    double target_angle_change = 0;
    bool task_finished = 0, turn = 0, drive = 1, off = 0; 
    String txt;
    int val = 0;


  void setup() {
    //Timer setup
    Mysensor.setup();
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &onTimer, true);
    timerAlarmWrite(timer, 20000, true);
    timerAlarmEnable(timer);
        //IO Setup

      pinMode(MOTOR_A_IN1, OUTPUT);
    pinMode(MOTOR_A_IN2, OUTPUT);
    pinMode(MOTOR_A_ENA, OUTPUT);

    pinMode(MOTOR_B_IN1, OUTPUT);
    pinMode(MOTOR_B_IN2, OUTPUT);
    pinMode(MOTOR_B_ENA, OUTPUT);

    pinMode(12, OUTPUT);

    Mycontroller.setup_controller();

    //PID setup
    turnPID.SetMode(AUTOMATIC);
    drivePID.SetMode(AUTOMATIC);

    Serial.println("Ending Setup");
}



void loop() {
  
if(task_finished == 0){
  //Calculate current angle ================================
  if (interruptCounter > 0) {
    portENTER_CRITICAL(&timerMux);
    interruptCounter--;
    portEXIT_CRITICAL(&timerMux);
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);
    current_angular_velocity = g.gyro.z - gyro_offset;
    gyroSamples.add(current_angular_velocity);
    median_angular_velocity = gyroSamples.getMedian();
    current_angle -= (median_angular_velocity * 0.02)*180/pi;
    user_angle = Mycontroller.angle_PID_to_user(current_angle);
    countLoops++;
    error = abs(target_angle - current_angle);
    lastError.add(error);
    medianError = lastError.getMedian();
  }
  
  
  if(countLoops == 4){
    if(turn == 1){
          Mysensor.motion_detction();
          if(limit > MOTOR_DELTAMAX_TURN){
            limit = MOTOR_DELTAMAX_TURN;
            turnPID.SetOutputLimits(-limit, limit);
          }else{
            limit += 0.25;
            turnPID.SetOutputLimits(-limit, limit);
          }  
          Serial.println("Median Angular Velocity: " + String(median_angular_velocity,3) + " Current Angle: " + String(current_angle,3) + " Steer Correction: " + String(angleCorrection, 3));
          turnPID.Compute();
          Mycontroller.motor_forward(angleCorrection); //Correction negative - turn left  
          if(medianError >= 0.5 && medianError < 7){
            turnPID.SetOutputLimits(-50, 50);
            if(angleCorrection > 0)   {angleCorrection = map(angleCorrection, 0, 50, 35, 50);}
            else                      {angleCorrection = map(angleCorrection, -50, 0, -50, -35);}
          } 
          if(medianError < 0.5){
            task_finished = 1;
            Mycontroller.motor_off();
            Serial.println("Turn Completed");
          }  
          countLoops = 0;
          
    }
    
    else if(drive == 1){
      Mysensor.motion_detction();
       if(MOTOR_NOMINAL < MOTOR_NOMINAL_DRIVE){
        MOTOR_NOMINAL ++;
        }else{
        MOTOR_NOMINAL = MOTOR_NOMINAL_DRIVE;
        }  
        if(limit > MOTOR_DELTAMAX_DRIVE){
          limit = MOTOR_DELTAMAX_DRIVE;
          drivePID.SetOutputLimits(-limit, limit);
        }else{
          limit++;
          drivePID.SetOutputLimits(-limit, limit);
        }       
        Serial.println("Median Angular Velocity: " + String(median_angular_velocity,3) + " Current Angle: " + String(current_angle,3) + " Steer Correction: " + String(angleCorrection, 3));
        drivePID.Compute();
        Mycontroller.motor_forward(angleCorrection); //Correction positive - turn left
        countLoops = 0;
        distance_y_covered= Mysensor.distance_y_f()-old_distance_y;
        if(abs(distance_y_covered-desired_distance)<0.5){
            Mycontroller.motor_off();
            Serial.println("Distance achieved");
            task_finished = 1;
            old_distance_y=Mysensor.distance_y_f();
        }
    }

    else if(off == 1){
        Mycontroller.motor_off();
        task_finished = 1;
        Serial.println("Off Completed");
    }
    
  }  
}
else{
  if(Serial.available()){
    txt = Serial.readStringUntil('\n');
    Serial.println(txt);
    if(txt == "drive"){
      target_angle = current_angle;
      MOTOR_NOMINAL = 0;
      MOTOR_DELTAMAX = MOTOR_DELTAMAX_DRIVE;
      drive = 1;
      turn = 0;
      off = 0;
      limit = 0;
      angleCorrection = 0;
      task_finished = 0;
    }
    else if(txt == "turn"){
      MOTOR_NOMINAL = 0;
      MOTOR_DELTAMAX = MOTOR_DELTAMAX_TURN;
      limit = 0;
      drive = 0;
      turn = 1;
      off = 0;
      angleCorrection = 0;
      task_finished = 0;
    }
    else if(txt == "off"){
      MOTOR_NOMINAL = 0;
      MOTOR_DELTAMAX = 0;
      drive = 0;
      turn = 0;
      off = 1;
      limit = 0;
      angleCorrection = 0;
      task_finished = 0;
    }
    else{
      desired_distance = txt.toInt();
      //target_angle = current_angle + target_angle_change;
      Serial.println("Target distance: " + String(desired_distance));
    }
  }
}



}